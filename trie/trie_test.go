// Generated by gemini 2 flash exp

package trie

import (
	"testing"
)

func TestTrie_Put(t *testing.T) {
	trie := New[int]()
	old, replaced := trie.Put("foo", 1)
	if replaced {
		t.Errorf("expected not replaced, got replaced")
	}
	if old != 0 {
		t.Errorf("expected old value to be 0, got %v", old)
	}

	old, replaced = trie.Put("foo", 2)
	if !replaced {
		t.Errorf("expected replaced, got not replaced")
	}
	if old != 1 {
		t.Errorf("expected old value to be 1, got %v", old)
	}

	old, replaced = trie.Put("", 3)
	if replaced {
		t.Errorf("expected not replaced, got replaced")
	}
	if old != 0 {
		t.Errorf("expected old value to be 0, got %v", old)
	}
}

func BenchmarkTrie_Put(b *testing.B) {
	trie := New[int]()
	for i := 0; i < b.N; i++ {
		trie.Put("foo", i)
	}
}

func TestTrie_Get(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	value, found := trie.Get("foo")
	if !found {
		t.Errorf("expected found, got not found")
	}
	if value != 1 {
		t.Errorf("expected value to be 1, got %v", value)
	}

	value, found = trie.Get("bar")
	if found {
		t.Errorf("expected not found, got found")
	}
	if value != 0 {
		t.Errorf("expected value to be 0, got %v", value)
	}

	value, found = trie.Get("")
	if found {
		t.Errorf("expected not found, got found")
	}
	if value != 0 {
		t.Errorf("expected value to be 0, got %v", value)
	}
}

func BenchmarkTrie_Get(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	for i := 0; i < b.N; i++ {
		trie.Get("foo")
	}
}

func TestTrie_Delete(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	value, deleted := trie.Delete("foo")
	if !deleted {
		t.Errorf("expected deleted, got not deleted")
	}
	if value != 1 {
		t.Errorf("expected value to be 1, got %v", value)
	}

	value, deleted = trie.Delete("foo")
	if deleted {
		t.Errorf("expected not deleted, got deleted")
	}
	if value != 0 {
		t.Errorf("expected value to be 0, got %v", value)
	}

	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)
	value, deleted = trie.Delete("foobar")
	if !deleted {
		t.Errorf("expected deleted, got not deleted")
	}
	if value != 2 {
		t.Errorf("expected value to be 2, got %v", value)
	}
	value, found := trie.Get("foobarbaz")
	if !found {
		t.Errorf("expected found, got not found")
	}
	if value != 3 {
		t.Errorf("expected value to be 3, got %v", value)
	}

	value, deleted = trie.Delete("")
	if deleted {
		t.Errorf("expected not deleted, got deleted")
	}
	if value != 0 {
		t.Errorf("expected value to be 0, got %v", value)
	}
}

func BenchmarkTrie_Delete(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	for i := 0; i < b.N; i++ {
		trie.Delete("foo")
	}
}

func TestTrie_Exists(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	exists := trie.Exists("foo")
	if !exists {
		t.Errorf("expected exists, got not exists")
	}

	exists = trie.Exists("bar")
	if exists {
		t.Errorf("expected not exists, got exists")
	}
}

func BenchmarkTrie_Exists(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	for i := 0; i < b.N; i++ {
		trie.Exists("foo")
	}
}

func TestTrie_Prefixes(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	prefixes := trie.Prefixes("foobarbaz")
	if len(prefixes) != 2 {
		t.Errorf("expected 2 prefixes, got %v", len(prefixes))
	}
	if prefixes[0] != "foo" {
		t.Errorf("expected prefix to be foo, got %v", prefixes[0])
	}
	if prefixes[1] != "foobar" {
		t.Errorf("expected prefix to be foobar, got %v", prefixes[1])
	}

	prefixes = trie.Prefixes("bar")
	if len(prefixes) != 0 {
		t.Errorf("expected 0 prefixes, got %v", len(prefixes))
	}
}

func BenchmarkTrie_Prefixes(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.Prefixes("foobarbaz")
	}
}

func TestTrie_HasPrefixes(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	hasPrefixes := trie.HasPrefixes("foobarbaz")
	if !hasPrefixes {
		t.Errorf("expected has prefixes, got not has prefixes")
	}

	hasPrefixes = trie.HasPrefixes("bar")
	if hasPrefixes {
		t.Errorf("expected not has prefixes, got has prefixes")
	}
}

func BenchmarkTrie_HasPrefixes(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.HasPrefixes("foobarbaz")
	}
}

func TestTrie_Suffixes(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	suffixes := trie.Suffixes("foo")
	if len(suffixes) != 2 {
		t.Errorf("expected 2 suffixes, got %v", len(suffixes))
	}
	if suffixes[0] != "foobar" {
		t.Errorf("expected suffix to be foobar, got %v", suffixes[0])
	}
	if suffixes[1] != "foobarbaz" {
		t.Errorf("expected suffix to be foobarbaz, got %v", suffixes[1])
	}

	suffixes = trie.Suffixes("bar")
	if len(suffixes) != 0 {
		t.Errorf("expected 0 suffixes, got %v", len(suffixes))
	}
}

func BenchmarkTrie_Suffixes(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.Suffixes("foo")
	}
}

func TestTrie_HasSuffixes(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	hasSuffixes := trie.HasSuffixes("foo")
	if !hasSuffixes {
		t.Errorf("expected has suffixes, got not has suffixes")
	}

	hasSuffixes = trie.HasSuffixes("bar")
	if hasSuffixes {
		t.Errorf("expected not has suffixes, got has suffixes")
	}
}

func BenchmarkTrie_HasSuffixes(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.HasSuffixes("foo")
	}
}

func TestTrie_Enum(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	var count int
	trie.Enum(func(key string, value int) bool {
		count++
		return true
	})

	if count != 3 {
		t.Errorf("expected 3 enums, got %v", count)
	}

	count = 0
	trie.Enum(func(key string, value int) bool {
		count++
		if key == "foobar" {
			return false
		}
		return true
	})

	if count != 2 {
		t.Errorf("expected 2 enums, got %v", count)
	}
}

func BenchmarkTrie_Enum(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.Enum(func(key string, value int) bool {
			return true
		})
	}
}

func TestTrie_EnumKeys(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	var count int
	trie.EnumKeys(func(key string) bool {
		count++
		return true
	})

	if count != 3 {
		t.Errorf("expected 3 enums, got %v", count)
	}

	count = 0
	trie.EnumKeys(func(key string) bool {
		count++
		if key == "foobar" {
			return false
		}
		return true
	})

	if count != 2 {
		t.Errorf("expected 2 enums, got %v", count)
	}
}

func BenchmarkTrie_EnumKeys(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.EnumKeys(func(key string) bool {
			return true
		})
	}
}

func TestTrie_EnumValues(t *testing.T) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	var count int
	trie.EnumValues(func(value int) bool {
		count++
		return true
	})

	if count != 3 {
		t.Errorf("expected 3 enums, got %v", count)
	}

	count = 0
	trie.EnumValues(func(value int) bool {
		count++
		if value == 2 {
			return false
		}
		return true
	})

	if count != 2 {
		t.Errorf("expected 2 enums, got %v", count)
	}
}

func BenchmarkTrie_EnumValues(b *testing.B) {
	trie := New[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.EnumValues(func(value int) bool {
			return true
		})
	}
}

func TestSyncTrie_Put(t *testing.T) {
	trie := NewSyncTrie[int]()
	old, replaced := trie.Put("foo", 1)
	if replaced {
		t.Errorf("expected not replaced, got replaced")
	}
	if old != 0 {
		t.Errorf("expected old value to be 0, got %v", old)
	}

	old, replaced = trie.Put("foo", 2)
	if !replaced {
		t.Errorf("expected replaced, got not replaced")
	}
	if old != 1 {
		t.Errorf("expected old value to be 1, got %v", old)
	}

	old, replaced = trie.Put("", 3)
	if replaced {
		t.Errorf("expected not replaced, got replaced")
	}
	if old != 0 {
		t.Errorf("expected old value to be 0, got %v", old)
	}
}

func BenchmarkSyncTrie_Put(b *testing.B) {
	trie := NewSyncTrie[int]()
	for i := 0; i < b.N; i++ {
		trie.Put("foo", i)
	}
}

func TestSyncTrie_Get(t *testing.T) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	value, found := trie.Get("foo")
	if !found {
		t.Errorf("expected found, got not found")
	}
	if value != 1 {
		t.Errorf("expected value to be 1, got %v", value)
	}

	value, found = trie.Get("bar")
	if found {
		t.Errorf("expected not found, got found")
	}
	if value != 0 {
		t.Errorf("expected value to be 0, got %v", value)
	}

	value, found = trie.Get("")
	if found {
		t.Errorf("expected not found, got found")
	}
	if value != 0 {
		t.Errorf("expected value to be 0, got %v", value)
	}
}

func BenchmarkSyncTrie_Get(b *testing.B) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	for i := 0; i < b.N; i++ {
		trie.Get("foo")
	}
}

func TestSyncTrie_Delete(t *testing.T) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	value, deleted := trie.Delete("foo")
	if !deleted {
		t.Errorf("expected deleted, got not deleted")
	}
	if value != 1 {
		t.Errorf("expected value to be 1, got %v", value)
	}

	value, deleted = trie.Delete("foo")
	if deleted {
		t.Errorf("expected not deleted, got deleted")
	}
	if value != 0 {
		t.Errorf("expected value to be 0, got %v", value)
	}

	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)
	value, deleted = trie.Delete("foobar")
	if !deleted {
		t.Errorf("expected deleted, got not deleted")
	}
	if value != 2 {
		t.Errorf("expected value to be 2, got %v", value)
	}
	value, found := trie.Get("foobarbaz")
	if !found {
		t.Errorf("expected found, got not found")
	}
	if value != 3 {
		t.Errorf("expected value to be 3, got %v", value)
	}

	value, deleted = trie.Delete("")
	if deleted {
		t.Errorf("expected not deleted, got deleted")
	}
	if value != 0 {
		t.Errorf("expected value to be 0, got %v", value)
	}
}

func BenchmarkSyncTrie_Delete(b *testing.B) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	for i := 0; i < b.N; i++ {
		trie.Delete("foo")
	}
}

func TestSyncTrie_Exists(t *testing.T) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	exists := trie.Exists("foo")
	if !exists {
		t.Errorf("expected exists, got not exists")
	}

	exists = trie.Exists("bar")
	if exists {
		t.Errorf("expected not exists, got exists")
	}
}

func BenchmarkSyncTrie_Exists(b *testing.B) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	for i := 0; i < b.N; i++ {
		trie.Exists("foo")
	}
}

func TestSyncTrie_Prefixes(t *testing.T) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	prefixes := trie.Prefixes("foobarbaz")
	if len(prefixes) != 2 {
		t.Errorf("expected 2 prefixes, got %v", len(prefixes))
	}
	if prefixes[0] != "foo" {
		t.Errorf("expected prefix to be foo, got %v", prefixes[0])
	}
	if prefixes[1] != "foobar" {
		t.Errorf("expected prefix to be foobar, got %v", prefixes[1])
	}

	prefixes = trie.Prefixes("bar")
	if len(prefixes) != 0 {
		t.Errorf("expected 0 prefixes, got %v", len(prefixes))
	}
}

func BenchmarkSyncTrie_Prefixes(b *testing.B) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.Prefixes("foobarbaz")
	}
}

func TestSyncTrie_HasPrefixes(t *testing.T) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	hasPrefixes := trie.HasPrefixes("foobarbaz")
	if !hasPrefixes {
		t.Errorf("expected has prefixes, got not has prefixes")
	}

	hasPrefixes = trie.HasPrefixes("bar")
	if hasPrefixes {
		t.Errorf("expected not has prefixes, got has prefixes")
	}
}

func BenchmarkSyncTrie_HasPrefixes(b *testing.B) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.HasPrefixes("foobarbaz")
	}
}

func TestSyncTrie_Suffixes(t *testing.T) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	suffixes := trie.Suffixes("foo")
	if len(suffixes) != 2 {
		t.Errorf("expected 2 suffixes, got %v", len(suffixes))
	}
	if suffixes[0] != "foobar" {
		t.Errorf("expected suffix to be foobar, got %v", suffixes[0])
	}
	if suffixes[1] != "foobarbaz" {
		t.Errorf("expected suffix to be foobarbaz, got %v", suffixes[1])
	}

	suffixes = trie.Suffixes("bar")
	if len(suffixes) != 0 {
		t.Errorf("expected 0 suffixes, got %v", len(suffixes))
	}
}

func BenchmarkSyncTrie_Suffixes(b *testing.B) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.Suffixes("foo")
	}
}

func TestSyncTrie_HasSuffixes(t *testing.T) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	hasSuffixes := trie.HasSuffixes("foo")
	if !hasSuffixes {
		t.Errorf("expected has suffixes, got not has suffixes")
	}

	hasSuffixes = trie.HasSuffixes("bar")
	if hasSuffixes {
		t.Errorf("expected not has suffixes, got has suffixes")
	}
}

func BenchmarkSyncTrie_HasSuffixes(b *testing.B) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.HasSuffixes("foo")
	}
}

func TestSyncTrie_Enum(t *testing.T) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	var count int
	trie.Enum(func(key string, value int) bool {
		count++
		return true
	})

	if count != 3 {
		t.Errorf("expected 3 enums, got %v", count)
	}

	count = 0
	trie.Enum(func(key string, value int) bool {
		count++
		if key == "foobar" {
			return false
		}
		return true
	})

	if count != 2 {
		t.Errorf("expected 2 enums, got %v", count)
	}
}

func BenchmarkSyncTrie_Enum(b *testing.B) {
	trie := NewSyncTrie[int]()
	trie.Put("foo", 1)
	trie.Put("foobar", 2)
	trie.Put("foobarbaz", 3)

	for i := 0; i < b.N; i++ {
		trie.Enum(func(key string, value int) bool {
			return true
		})
	}
}
